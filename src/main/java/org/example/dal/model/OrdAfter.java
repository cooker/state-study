package org.example.dal.model;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.Accessors;

/**
 *
 * @author Grant
 * 表名： ord_after
 *
 */
@Accessors(chain = true)
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class OrdAfter implements Serializable {
    private Long id;

    /**
     * Database Column Remarks:
     *   类型
     */
    private Integer typeCd;

    /**
     * Database Column Remarks:
     *   售后单号
     */
    private String afterId;

    /**
     * Database Column Remarks:
     *   订单号
     */
    private String orderId;

    /**
     * Database Column Remarks:
     *   状态
     */
    private Integer statusCd;

    /**
     * Database Column Remarks:
     *   总金额
     */
    private BigDecimal amount;

    private static final long serialVersionUID = 1L;

    /**
     * This enum was generated by MyBatis Generator.
     * This enum corresponds to the database table ord_after
     *
     * @mbg.generated
     */
    public static enum Column {
        id("id", "id", "BIGINT", false),
        typeCd("type_cd", "typeCd", "TINYINT", false),
        afterId("after_id", "afterId", "VARCHAR", false),
        orderId("order_id", "orderId", "VARCHAR", false),
        statusCd("status_cd", "statusCd", "TINYINT", false),
        amount("amount", "amount", "DECIMAL", false);

        private static final String BEGINNING_DELIMITER = "'";

        private static final String ENDING_DELIMITER = "'";

        private final String column;

        private final boolean isColumnNameDelimited;

        private final String javaProperty;

        private final String jdbcType;

        public String value() {
            return this.column;
        }

        public String getValue() {
            return this.column;
        }

        public String getJavaProperty() {
            return this.javaProperty;
        }

        public String getJdbcType() {
            return this.jdbcType;
        }

        Column(String column, String javaProperty, String jdbcType, boolean isColumnNameDelimited) {
            this.column = column;
            this.javaProperty = javaProperty;
            this.jdbcType = jdbcType;
            this.isColumnNameDelimited = isColumnNameDelimited;
        }

        public String desc() {
            return this.getEscapedColumnName() + " DESC";
        }

        public String asc() {
            return this.getEscapedColumnName() + " ASC";
        }

        public static Column[] excludes(Column ... excludes) {
            ArrayList<Column> columns = new ArrayList<>(Arrays.asList(Column.values()));
            if (excludes != null && excludes.length > 0) {
                columns.removeAll(new ArrayList<>(Arrays.asList(excludes)));
            }
            return columns.toArray(new Column[]{});
        }

        public static Column[] all() {
            return Column.values();
        }

        public String getEscapedColumnName() {
            if (this.isColumnNameDelimited) {
                return new StringBuilder().append(BEGINNING_DELIMITER).append(this.column).append(ENDING_DELIMITER).toString();
            } else {
                return this.column;
            }
        }

        public String getAliasedEscapedColumnName() {
            return this.getEscapedColumnName();
        }
    }
}